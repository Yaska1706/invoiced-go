package invdendpoint

const ChargeEndpoint = "/charges"

type ChargeRequest struct {
	Customer          int64         `json:"customer,omitempty"`            // Customer ID, required if invoice ID is not supplied
	Method            string        `json:"method,omitempty"`              // Payment method ID, required
	Currency          string        `json:"currency,omitempty"`            // Optional, defaults to company currency
	Amount            float64       `json:"amount,omitempty"`              // Charge amount, required
	InvoicedToken     string        `json:"invoiced_token,omitempty"`      // Optional, generated by invoiced.js
	GatewayToken      string        `json:"gateway_token,omitempty"`       // Optional, generated by payment gateway
	PaymentSourceType string        `json:"payment_source_type,omitempty"` // One of card, bank_account
	PaymentSourceId   float64       `json:"payment_source_id,omitempty"`   // Optional, card or bank account ID
	VaultMethod       bool          `json:"vault_method,omitempty"`        // Optional; when true, vaults the payment source on the customer’s account
	MakeDefault       bool          `json:"make_default,omitempty"`        // Optional; when this and vault_method are true, saves payment as default on customer’s account
	ReceiptEmail      string        `json:"receipt_email,omitempty"`       // Optional; where the payment receipt is sent
	AppliedTo         []PaymentItem `json:"applied_to,omitempty"`          // Required, contains payment application, i.e. [{“type”: “invoice”, “invoice”: 1234, “amount”: 400.00}]
}

type Charge struct {
	Id             int64          `json:"id,omitempty"`              // The payment’s unique ID
	Object         string         `json:"object,omitempty"`          // Object type, payment
	Customer       int64          `json:"customer,omitempty"`        // Customer ID, required if invoice ID is not supplied
	Status         string         `json:"status,omitempty"`          // Payment status, one of succeeded, pending, or failed, defaults to succeeded
	Gateway        string         `json:"gateway,omitempty"`         // Payment gateway that processed the payment, if any
	GatewayId      string         `json:"gateway_id,omitempty"`      // Payment ID from the payment gateway, or check # if method is check
	PaymentSource  *PaymentSource `json:"payment_source,omitempty"`  // Payment source used for payment, if any
	Currency       string         `json:"currency,omitempty"`        // 3-letter ISO code
	Amount         float64        `json:"amount,omitempty"`          // Payment amount
	FailureMessage string         `json:"failure_message,omitempty"` // Failure message from the payment gateway (only available when status = failed)
	AmountRefunded float64        `json:"amount_refunded,omitempty"`
	Refunded       bool           `json:"refunded,omitempty"`
	Refunds        []Refund       `json:"refunds,omitempty"`
	Disputed       bool           `json:"disputed,omitempty"`
	CreatedAt      int64          `json:"created_at,omitempty"` // Timestamp when created
}
